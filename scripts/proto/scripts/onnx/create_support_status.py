#!/usr/bin/env python3

"""
Generate a Markdown file that contains tables of the support status of LBANN-ONNX conversions from the scripts.

This script checks:
* existence of parser functions along with its parserDescriptor
* existence of test functions

This script outputs the following statuses for each LBANN/ONNX operators:
* Supported: The conversion is supported. If this is not true, the conversion is explicitly disabled (for some reasons).
* Tested:    There exists at least one test fucntion for the conversion.
* Bijective: The operator is paired with an another operator, and the conversion is bijective.

If an operator is not listed in the generated list, it is not supported.

Usage: ./create_support_status.py
"""

import os
import re
import unittest

from lbann.onnx.tests.onnx2lbann_layer_test import TestOnnx2LbannLayer
from lbann.onnx.tests.lbann2onnx_layer_test import TestLbann2OnnxLayer
from lbann.onnx.o2l.layers import PARSERS as PARSERS_o2l
from lbann.onnx.l2o.layers import PARSERS as PARSERS_l2o

def getTestedO2LLayers():
    return set(map(lambda x: x.group(1),
                   filter(lambda x: x is not None,
                          map(lambda x: re.compile("test_o2l_layer_(.+)").match(x),
                              dir(TestOnnx2LbannLayer())))))

def getTestedL2OLayers():
    return set(map(lambda x: x.group(1),
                   filter(lambda x: x is not None,
                          map(lambda x: re.compile("test_l2o_layer_(.+)").match(x),
                              dir(TestLbann2OnnxLayer())))))

def addLinkToOnnxOperator(op):
    return "[{}](https://github.com/onnx/onnx/blob/master/docs/Operators.md#{})".format(op, op)

def createTable(o2l):
    onnxOp = "ONNX Operator"
    lbannOp = "LBANN Layer"
    lines = [
        "## {}".format("ONNX to LBANN" if o2l else "LBANN to ONNX"),
        "| {} | Converted {} | Supported | Tested | Bijective |".format(
            onnxOp if o2l else lbannOp,
            lbannOp if o2l else onnxOp,
        ),
        "|---|---|:-:|:-:|:-:|",
    ]

    bijections = getBijections(PARSERS_o2l if o2l else PARSERS_l2o,
                               PARSERS_l2o if o2l else PARSERS_o2l)
    testedParsers = getTestedO2LLayers() if o2l else getTestedL2OLayers()
    for l, p in (PARSERS_o2l if o2l else PARSERS_l2o).items():
        converted = ", ".join(list(map(lambda x: x if o2l else addLinkToOnnxOperator(x),
                                       p.convertedLayers)))
        if p.arithmetic:
            converted = "[Multiple operators]"

        tested = any([re.compile(l).match(x) is not None for x in testedParsers])
        lines.append(
            "| {} | {} | {} | {} | {} | ".format(
                addLinkToOnnxOperator(l) if o2l else l,
                converted,
                "✔" if not p.stub else "",
                "✔" if tested else "",
                "✔" if l in bijections else "",
            )
        )

    return lines

def getSurjectives(parsers):
    ret = []
    for l, p in parsers.items():
        if not p.arithmetic and not p.stub and len(p.convertedLayers) == 1:
            ret.append(l)

    return set(ret)

def getBijections(parsers1, parsers2):
    sur1 = getSurjectives(parsers1)
    sur2 = set(map(lambda x: parsers2[x].convertedLayers[0],
                   getSurjectives(parsers2)))
    return sur1 & sur2

if __name__ == "__main__":
    lines = ["# lbann-onnx Support Status",
             "This file is automatically generated by `scripts/create_support_status.py`."]
    lines.extend(createTable(False))
    lines.extend(createTable(True))

    print("\n".join(lines))
