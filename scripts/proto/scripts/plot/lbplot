#!/usr/bin/env python3

# Global imports
import argparse

# Import from this package
from lbann.plot.plot import plot, PRETTY_YLIM_LOSS

def main():
    # Parse user arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('stat_path', nargs='+', help='Path to LBANN/PyTorch output files.')
    parser.add_argument('-n', '--stat_name', nargs='+', help='Labels for the output files.', required=False)
    parser.add_argument('--ind_var', type=str, choices=['epoch', 'time'], default='time',
                        help='Independent variable for plotting.')
    parser.add_argument('--time_units', type=str, choices=['seconds', 'minutes', 'hours'], default='hours')
    parser.add_argument("--no-accuracy", dest="no_accuracy", action="store_const",
                        const=True, default=False,
                        help="Do not plot accuracy")
    parser.add_argument("--merge-train-val", dest="merge_train_val", action="store_const",
                        const=True, default=False,
                        help="Plot training/validation curves in the same figure")
    parser.add_argument("--pretty-ylim", dest="pretty_ylim", action="store_const",
                        const=True, default=False,
                        help="Set ylim to [0,1] for accuracy plots and [0,{}] for loss plots".format(PRETTY_YLIM_LOSS))
    parser.add_argument('--save-fig', type=str, default='',
                        help="Save the training/validation curve plot as an image file.")
    parser.add_argument("--no-fig", dest="no_fig", action="store_const",
                        const=True, default=False,
                        help="Do not show figures.")
    parser.add_argument('--save-csv', type=str, default='',
                        help="Save the sumamry table as a CSV file.")
    parser.add_argument('--loss-ymin', type=float, # default=None, # float("-inf"),
                        help="The minimum y-axis limit of the loss plot.")
    parser.add_argument('--loss-ymax', type=float, # default=None, # float("inf"),
                        help="The maximum y-axis limit of the loss plot.")
    parser.add_argument("--test-loss", dest="test_loss", action="store_const",
                        const=True, default=False,
                        help="Show the test loss")
    args = parser.parse_args()

    ylim = None
    if args.loss_ymin is not None:
        if args.loss_ymax is None:
            print("ERROR: --loss-ylim and --loss-ymax should be set at the same time.")
            exit(1)

        ylim = [args.loss_ymin, args.loss_ymax]

    # Tabulate and plot stats from user input files
    plot(args.stat_path, args.stat_name, ind_var=args.ind_var, time_units=args.time_units,
         plot_accuracy=(not args.no_accuracy),
         merge_train_val=args.merge_train_val,
         pretty_ylim=args.pretty_ylim,
         no_fig=args.no_fig,
         save_fig=args.save_fig if args.save_fig != '' else None,
         save_csv=args.save_csv if args.save_csv != '' else None,
         ylim=[args.loss_ymin, args.loss_ymax],
         test_loss=args.test_loss)


if __name__=='__main__':
    main()
