enable_language(C)
enable_language(CXX)

# Standard Superbuild boiler-plate
option(CONDUIT_CLONE_VIA_SSH
  "Clone CONDUIT using SSH instead of HTTPS" ${LBANN_SB_CLONE_VIA_SSH})

if (CONDUIT_CLONE_VIA_SSH)
  message(WARNING "Requested CONDUIT clone via SSH. This will happen.\n"
    "However, CONDUIT has a git submodule that will still clone via HTTPS.")

  set(CONDUIT_URL git@github.com:llnl/conduit.git
    CACHE STRING "The URL from which to clone CONDUIT")
else ()
  set(CONDUIT_URL https://github.com/llnl/conduit
    CACHE STRING "The URL from which to clone CONDUIT")
endif ()

set(CONDUIT_TAG "v0.5.1"
  CACHE STRING "The git tag to checkout for CONDUIT")

set(CONDUIT_CMAKE_BUILD_TYPE "${CMAKE_BUILD_TYPE}"
  CACHE STRING "The build type for CONDUIT.")

set(CONDUIT_CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
  CACHE PATH "The installation location of CONDUIT.")

option(CONDUIT_BUILD_SHARED_LIBS
  "Whether CONDUIT should build dynamically linked libraries."
  ON)

# CONDUIT-specific configuration options explicitly exposed
option(CONDUIT_ENABLE_MPI "Enable MPI support in CONDUIT." ON)
option(CONDUIT_ENABLE_PYTHON "Enable CONDUIT Python module support." OFF)
option(CONDUIT_ENABLE_TESTS "Build CONDUIT unit tests." OFF)
option(CONDUIT_ENABLE_FORTRAN "Build CONDUIT with fortran support" OFF)

if (CONDUIT_ENABLE_FORTRAN)
  enable_language(Fortran)
endif ()

if (LBANN_SB_BUILD_HDF5)
  set(_CONDUIT_DEPENDS_TAG DEPENDS)
  set(_CONDUIT_DEPENDENCIES HDF5)
endif ()

if (HDF5_DIR)
  set(CONDUIT_HDF5_DIR "${HDF5_DIR}")
endif ()

# Get the list of CONDUIT variables
get_property(CONDUIT_VARIABLES DIRECTORY PROPERTY VARIABLES)
list(FILTER CONDUIT_VARIABLES INCLUDE REGEX
  "^CONDUIT_.*\|^CONDUIT_.*\|^LBANN_SB_FWD_CONDUIT_.*\|^LBANN_SB_FWD_CONDUIT_.*")
list(FILTER CONDUIT_VARIABLES EXCLUDE REGEX "CONDUIT_URL\|CONDUIT_TAG")

create_cmake_arguments(
  OUTPUT_VARIABLE CONDUIT_CMAKE_ARGS
  PACKAGE_NAME CONDUIT
  REMOVE_PKG_NAME
  SKIP_VARS_WITH_PREFIXES "LBANN_SB"
  EXTRA_REMOVE_PREFIXES "LBANN_SB_FWD_CONDUIT" "LBANN_SB_FWD_CONDUIT"
  VARIABLES ${CONDUIT_VARIABLES})

if (CONDUIT_ENABLE_FORTRAN)
  list(APPEND CONDUIT_CMAKE_ARGS
    "-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}"
    "-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS}")
endif ()

if (CONDUIT_CUSTOM_SOURCE_DIR)
  set(CONDUIT_SOURCE_DIR "${CONDUIT_CUSTOM_SOURCE_DIR}")
  set(CONDUIT_URL "")
  set(CONDUIT_TAG "")
  set(_GIT_REPOSITORY_TAG)
  set(_GIT_TAG_TAG)
  message(STATUS "Using CONDUIT source in: ${CONDUIT_SOURCE_DIR}")
else ()
  set(CONDUIT_SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/src")
  set(_GIT_REPOSITORY_TAG "GIT_REPOSITORY")
  set(_GIT_TAG_TAG "GIT_TAG")
endif ()

include(ExternalProject)
ExternalProject_Add(CONDUIT
  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
  TMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/tmp
  STAMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/stamp
  ${_GIT_REPOSITORY_TAG} ${CONDUIT_URL}
  ${_GIT_TAG_TAG} ${CONDUIT_TAG}
  SOURCE_DIR ${CONDUIT_SOURCE_DIR}
  SOURCE_SUBDIR src
  BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/build
  INSTALL_DIR ${CONDUIT_CMAKE_INSTALL_PREFIX}
  ${_CONDUIT_DEPENDS_TAG} ${_CONDUIT_DEPENDENCIES}
  USES_TERMINAL_BUILD 1
  LOG_DOWNLOAD 1
  LOG_UPDATE 1
  LOG_CONFIGURE 1
  LOG_BUILD 1
  LOG_INSTALL 1
  LOG_TEST 1
  LIST_SEPARATOR |
  CMAKE_ARGS
  -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
  -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
  -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
  -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
  ${CONDUIT_CMAKE_ARGS}
  )

set(CONDUIT_DIR ${CONDUIT_CMAKE_INSTALL_PREFIX}
  CACHE INTERNAL "The install prefix of CONDUIT.")
